{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","views/PhoneBookView/PhoneBookView.module.css","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","Components/Form/Form.module.css","Components/ContactsList/ContactsList.module.css","Components/Filter/Filter.module.css","redux/phoneBook/phoneBook-operations.js","Components/Form/Form.jsx","redux/phoneBook/phoneBook-selectors.js","Components/ContactsList/ContactsList.jsx","Components/Filter/Filter.jsx","views/PhoneBookView/PhoneBookView.jsx"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","axios","defaults","baseURL","Form","state","name","nameInputId","shortid","numberInputId","handleChange","event","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","alert","this","className","s","form","htmlFor","label","type","input","placeholder","onChange","Button","variant","add_btn","Component","connect","dispatch","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","message","addContact","getLoading","phoneBook","loading","getError","getFilter","getFilteredContacts","createSelector","contacts","allContacts","filtered","normalizedFilter","toLowerCase","includes","onDelete","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","list","map","btn","onClick","filterContact","target","PhoneBookView","getContact","phonebook","color","height","width","timeout","getContactRequest","getContactSuccess","getContactError"],"mappings":"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","file":"static/js/ContactsPage.73bcbe2d.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"PhoneBookView_phonebook__2y5x1\"};","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3ZbCQ\",\"label\":\"Form_label__1VRLf\",\"input\":\"Form_input__GNoX3\",\"add_btn\":\"Form_add_btn__3zXnr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__27ILX\",\"item\":\"ContactsList_item__3tRFa\",\"name\":\"ContactsList_name__3igJ2\",\"btn\":\"ContactsList_btn__2_w9P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2TPjQ\",\"label\":\"Filter_label__6ixPj\"};","import axios from 'axios';\nimport {\n  addContactError,\n  addContactRequest,\n  addContactSuccess,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  getContactRequest,\n  getContactSuccess,\n  getContactError,\n} from './phoneBook-actions';\n\n// ОПЕРАЦИЯ ВСЕГДА ИСПОЛЬЗУЕТ ТРИ ЭКШЕНА - REQUEST,SUCCESS,ERROR\n\n// axios.defaults.baseURL = 'http://localhost:3000/';\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\n\nexport const addContact = ({ name, number }) => dispatch => {\n  dispatch(addContactRequest());\n  axios\n    .post('/contacts', { name, number })\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error.message)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error.message)));\n};\n\nexport const getContact = () => dispatch => {\n  dispatch(getContactRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(getContactSuccess(data)))\n    .catch(error => dispatch(getContactError(error.message)));\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/phoneBook/phoneBook-operations';\nimport shortid from 'shortid';\nimport s from './Form.module.css';\nimport { Button } from 'react-bootstrap';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  // ф-ция воода данных в любой инпут по атрибуту name\n  handleChange = event => {\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value,\n    });\n  };\n\n  // ф-ция сабмит на форме\n  handleSubmit = event => {\n    const { name, number } = this.state;\n    event.preventDefault();\n    if (!name || !number) {\n      alert('Enter name and phone number!');\n      return;\n    }\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  // очистка формы после сабмита\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { handleSubmit, nameInputId, handleChange, numberInputId } = this;\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId} className={s.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            className={s.input}\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n          />\n        </label>\n        <label htmlFor={numberInputId} className={s.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            // pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n            className={s.input}\n            placeholder=\"Enter phone number\"\n            value={number}\n            onChange={handleChange}\n            id={numberInputId}\n          />\n        </label>\n\n        <Button variant=\"primary\" type=\"submit\" className={s.add_btn}>\n          Add contact\n        </Button>\n      </form>\n    );\n  }\n}\n\n// state здесь не нужен, поэтому mapStateToProps не используем\n// используем только mapDispatchToProps\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) => dispatch(addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import { createSelector } from '@reduxjs/toolkit';\n\n// селекторы всегда получают весь state\n\nexport const getLoading = state => state.phoneBook.loading;\n\nexport const getError = state => state.phoneBook.error;\n\nexport const getAllContacts = state => state.phoneBook.contacts;\n\nexport const getFilter = state => state.phoneBook.filter;\n\n// мемоизация\n// в createselector передаем те селекторы, от которых зависит мемоизированный селектор\n// если с предыдущего allContacts и filtered не изменились, то фильтр не произойдет, а из кеша вернутся старые данные\n\nexport const getFilteredContacts = createSelector(\n  [getAllContacts, getFilter],\n  (allContacts, filtered) => {\n    const normalizedFilter = filtered.toLowerCase();\n    return allContacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import { connect } from 'react-redux';\nimport {\n  // addContactRequest,\n  // addContactSuccess,\n  // addContactError,\n  deleteContact,\n  // filterContact,\n} from '../../redux/phoneBook/phoneBook-operations';\nimport { getFilteredContacts } from '../../redux/phoneBook/phoneBook-selectors';\n\nimport PropTypes from 'prop-types';\nimport s from './ContactsList.module.css';\nimport { Button } from 'react-bootstrap';\n\nconst ContactsList = ({ contacts = [], onDelete }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <span className={s.name}>{name}:</span>{' '}\n          <span className={s.number}>{number}</span>\n          <Button\n            className={s.btn}\n            variant=\"outline-secondary\"\n            onClick={() => onDelete(id)}\n          >\n            Delete\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import { connect } from 'react-redux';\nimport {\n  // addContactRequest,\n  // addContactSuccess,\n  // addContactError,\n  // deleteContact,\n  filterContact,\n} from '../../redux/phoneBook/phoneBook-actions';\nimport { getFilter } from '../../redux/phoneBook/phoneBook-selectors';\n\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div className={s.filter}>\n      <label htmlFor=\"\" className={s.label}>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Search\"\n          className={s.input}\n          value={filter}\n          onChange={onChange}\n        ></input>\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(filterContact(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Loader from 'react-loader-spinner';\nimport s from './PhoneBookView.module.css';\nimport Form from '../../Components/Form';\nimport ContactsList from '../../Components/ContactsList';\nimport Filter from '../../Components/Filter';\nimport { getContact } from '../../redux/phoneBook/phoneBook-operations';\nimport {\n  getLoading,\n  getError,\n} from '../../redux/phoneBook/phoneBook-selectors';\n\nclass PhoneBookView extends Component {\n  componentDidMount() {\n    this.props.getContact();\n  }\n  render() {\n    const { loading, error } = this.props;\n    return (\n      <div className={s.phonebook}>\n        <h1>Phonebook</h1>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        {loading && (\n          <Loader\n            type=\"ThreeDots\"\n            color=\"#424141\"\n            height={60}\n            width={60}\n            timeout={3000}\n          />\n        )}\n        {error && <p>Oops! Something went wrong...</p>}\n        <ContactsList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: getLoading(state),\n  error: getError(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getContact: () => dispatch(getContact()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneBookView);\n"],"sourceRoot":""}